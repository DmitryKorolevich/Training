@{
    Layout = "~/Views/Shared/_ViewCartLayout.cshtml";
}

@using VC.Public.Models.Cart
@model VC.Public.Models.Checkout.MultipleReceiptModel
@using Microsoft.Extensions.Options
@using VitalChoice.Infrastructure.Domain.Options
@inject IOptions<AppOptions> appOptions

@section PageScripts {
    <script src="@Url.Content("/app/modules/checkout/checkoutMain.js")?v=@(appOptions.Value.Versioning.BuildNumber)"></script>
    <script src="@Url.Content("/app/modules/checkout/receipt.js")?v=@(appOptions.Value.Versioning.BuildNumber)"></script>
}

@section Meta {
    <title>Wild Seafood & Organics - Vital Choice</title>
}

<div class="checkout-step-container working-area-holder">
    <img class="checkout-step-banner" src="/assets/images/checkout/step5.jpg" />
    <div class="centered-horizontal">
        <h4 class="checkout-step-heading centered-horizontal">Thank You for Your Order!</h4>
        <span class="checkout-notification-simple">
            Your order has been processed and a confirmation email has been sent to the address you provided.<br />
            If you see any errors, please send the details, including your 6-digit order number<br />
            and your telephone number, to <a href="#">info@vitalchoice.com</a> or call 1-800-608-4825.<br />
        </span>
        <span class="checkout-notification-simple margin-top-small">
            We will send you a Shipping Notification email when your order ships.<br />
            Frozen foods ship separately, and generally arrive before non-perishable goods.<br />
            As applicable, you will receive separate Shipping Notification emails for frozen and non-perishable goods.<br />
        </span>
        <span class="checkout-notification-simple margin-top-reasonable">
            <span class="shopping-notice-note">NOTE:</span> If you ordered an e-Gift, please scroll down to the “Notify Recipient” section,<br />
            enter recipient’s name, email address, and your message where indicated, then click “Send Email”.
        </span>
        <div class="margin-top-reasonable margin-bottom-reasonable">
            <a href="/" class="button arrow-left-red">Continue Shopping</a>
        </div>
    </div>
    @foreach (var receipt in Model.Receipts)
    {
        <div class="padding-bottom-medium receipt-item @(receipt.AlternateColor ? "alternate-color" : "")">
            <div class="checkout-sections-divider margin-bottom-small"></div>
            <div class="receipt-info-line">
                @Html.LabelFor(x => x.Receipts[0].OrderNumber, null, new { @class = "bold" }):<span>@receipt.OrderNumber</span>
            </div>
            <div class="receipt-info-line">
                @Html.LabelFor(x => x.Receipts[0].OrderDate, null, new { @class = "bold" }):<span>@receipt.OrderDate.ToString("MM/dd/yyyy")</span>
            </div>
            @if (!receipt.ShipAsap && receipt.ShippingDate.HasValue)
            {
                <div class="receipt-info-line">
            <label class="bold">Ship Delay Date</label>@(":")<span class="ship-delay-date">@receipt.ShippingDate?.ToString("MM/dd/yyyy")</span>
                </div>
            }
            <div class="reivew-order-info receipt-step two-columns">
                <div class="reivew-info-box">
                    <div class="review-header-container">
                        <span>Bill to Details</span>
                    </div>
                    @foreach (var item in receipt.CreditCardDetails)
                {
                        <div class="review-box-line">
                            @if (!string.IsNullOrWhiteSpace(item.Key))
                            {
                                <span class="review-info-label">@item.Key:</span>
                            }
                            <span class="review-info-value">@item.Value</span>
                        </div>
                    }
                    <div class="review-box-line">
                    </div>
                    @foreach (var item in receipt.BillToAddress)
                {
                    if (!string.IsNullOrEmpty(item.Value))
                    {
                            <div class="review-box-line">
                                @if (!string.IsNullOrWhiteSpace(item.Key))
                                {
                                    <span class="review-info-label">@item.Key:</span>
                                }
                                <span class="review-info-value">@item.Value</span>
                            </div>
                        }
                    }
                </div>
                <div class="reivew-info-box">
                    <div class="review-header-container">
                        <span>Ship to Details</span>
                    </div>
                    @foreach (var item in receipt.ShipToAddress)
                {
                    if (!string.IsNullOrEmpty(item.Value))
                    {
                            <div class="review-box-line">
                                @if (!string.IsNullOrWhiteSpace(item.Key))
                                {
                                    <span class="review-info-label">@item.Key:</span>
                                }
                                <span class="review-info-value">@item.Value</span>
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="margin-bottom-small"></div>
            <div class="receipt-sku-details">
                <table class="standard-table cart-items-list cart-items-list-readonly">
                    <thead>
                        <tr>
                            <th>
                                Qty
                            </th>
                            <th>
                                SKU
                            </th>
                            <th>
                                Description
                            </th>
                            <th>
                                Unit Price
                            </th>
                            <th>
                                Price
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (receipt.Skus.Count > 0)
                {
                    foreach (var t in receipt.Skus)
                    {
                                <tr>
                                    <td class="qty">@t.Quantity</td>
                                    <td class="sku">@t.Code</td>
                                    <td>
                                        <a class="cart-text-link" href="@t.ProductPageUrl">@t.DisplayName @(!string.IsNullOrWhiteSpace(t.SubTitle) ? $"{t.SubTitle} " : string.Empty)(@t.PortionsCount)</a>
                                        @foreach (var gcCode in t.GeneratedGCCodes)
                                        {
                                            <br />
                                            <span class="cart-sku-code"><em>GC Code: @gcCode</em></span>
                                        }
                                    </td>
                                    <td class="unit-price">@((t.Price ?? 0).ToString("C2"))</td>
                                    <td class="price">@((t.SubTotal ?? 0).ToString("C2"))</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr><td colspan="6">No Items Added</td></tr>
                        }
                    </tbody>
                </table>
            </div>
            @if (receipt.PromoSkus.Count > 0)
            {
                <div class="receipt-sku-details">
                    <label class="receipt-promo-title">Promo Products</label>
                    <table class="standard-table cart-items-list cart-items-list-readonly">
                        <thead>
                            <tr>
                                <th>
                                    Qty
                                </th>
                                <th>
                                    SKU
                                </th>
                                <th>
                                    Description
                                </th>
                                <th>
                                    Unit Price
                                </th>
                                <th>
                                    Price
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var t in receipt.PromoSkus)
                            {
                                <tr>
                                    <td class="qty">@t.Quantity</td>
                                    <td class="sku">@t.Code</td>
                                    <td>
                                        <a class="cart-text-link" href="@t.ProductPageUrl">@t.DisplayName @(!string.IsNullOrWhiteSpace(t.SubTitle) ? $"{t.SubTitle} " : string.Empty)(@t.PortionsCount)</a>
                                        @if (t.GeneratedGCCodes != null)
                                        {
                                            foreach (var gcCode in t.GeneratedGCCodes)
                                            {
                                                <br />
                                                <span class="cart-sku-code"><em>GC Code: @gcCode</em></span>
                                            }
                                        }
                                    </td>
                                    <td class="unit-price">@((t.Price ?? 0).ToString("C2"))</td>
                                    <td class="price">@((t.SubTotal ?? 0).ToString("C2"))</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            <div class="receipt-shipping-method">
                <label>Shipping:</label>
                <div class="receipt-shipping-linecontainer">
                    <div class="receipt-shipping-line">
                        <label class="cart-total-value">
                            Standard Shipping
                        </label>
                    </div>
                    @if (receipt.ShippingUpgradeNP.HasValue)
                {
                        <div class="receipt-shipping-line">
                            <label class="cart-total-value">
                                Non-Perishable: @receipt.ShippingUpgradeNPOptions.Single(x => x.Key == receipt.ShippingUpgradeNP).Text
                            </label>
                        </div>
                    }
                    @if (receipt.ShippingUpgradeP.HasValue)
                {
                        <div class="receipt-shipping-line">
                            <label class="cart-total-value">
                                Perishable: @receipt.ShippingUpgradePOptions.Single(x => x.Key == receipt.ShippingUpgradeP).Text
                            </label>
                        </div>
                    }
                </div>
            </div>
            <div class="cart-order-totals">
                <div class="cart-total-line">
                    @Html.LabelFor(x => x.Receipts[0].SubTotal)
                    <label class="cart-total-value">
                        @receipt.SubTotal.ToString("C2")
                    </label>
                </div>
                @if (receipt.DiscountTotal.HasValue && receipt.DiscountTotal.Value != 0)
                {
                    <div class="cart-total-line">
                        @Html.LabelFor(x => x.Receipts[0].DiscountTotal)
                        <label class="cart-total-value">
                            @receipt.DiscountTotal.Value.ToString("C2")
                        </label>
                    </div>
                }
                <div class="cart-total-line">
                    @Html.LabelFor(x => x.Receipts[0].ShippingCost)
                    <label class="cart-total-value">
                        @(receipt.ShippingCost.HasValue ? receipt.ShippingCost.Value.ToString("C2") : "FREE!")
                    </label>
                </div>
                @if (receipt.Tax != 0)
                {
                    <div class="cart-total-line">
                        @Html.LabelFor(x => x.Receipts[0].Tax)
                        <label class="cart-total-value">
                            @receipt.Tax.ToString("C2")
                        </label>
                    </div>
                }
                @if (receipt.GiftCertificatesTotal.HasValue && receipt.GiftCertificatesTotal.Value != 0)
                {
                    <div class="cart-total-line">
                        @Html.LabelFor(x => x.Receipts[0].GiftCertificatesTotal)
                        <label class="cart-total-value">
                            @receipt.GiftCertificatesTotal.Value.ToString("C2")
                        </label>
                    </div>
                }
                <div class="cart-total-line cart-order-summary">
                    @Html.LabelFor(x => x.Receipts[0].OrderTotal)
                    <label class="cart-total-value">
                        @receipt.OrderTotal.ToString("C2")
                    </label>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(receipt.DeliveryInstructions))
            {

                <div class="reivew-order-info receipt-step">
                    <div class="reivew-info-box">
                        <div class="review-header-container">
                            <span>Delivery Instructions</span>
                        </div>
                        <div class="review-box-line">
                            @receipt.DeliveryInstructions
                        </div>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(receipt.GiftMessage))
            {

                <div class="reivew-order-info receipt-step">
                    <div class="reivew-info-box">
                        <div class="review-header-container">
                            <span>Gift Message</span>
                        </div>
                        <div class="review-box-line">
                            @receipt.GiftMessage
                        </div>
                    </div>
                </div>
            }
            <div class="clear"></div>
        </div>
    }
    @if (Model.ShowEGiftEmailForm)
    {
        <div class="checkout-sections-divider margin-top-reasonable margin-bottom-small"></div>
        await Html.RenderPartialAsync("_SendEGiftEmail", Model.EGiftSendEmail);
    }
</div>
@using System.Threading.Tasks
@using VitalChoice.Ecommerce.Domain.Entities.Addresses
@using VitalChoice.Interfaces.Services
@using VitalChoice.Infrastructure.Domain.Transfer
@model VC.Public.Models.Checkout.AddUpdateShippingMethodModel

@inject ReferenceData appInfrastructureService;

@Html.HiddenFor(x=>x.ShipAddressIdToOverride)
@Html.HiddenFor(x => x.PreferredShipMethod)
<input id="hdCountry" value="@Html.DisplayForEx(x => x.IdCountry)" type="hidden">
<input id="hdState" value="@Html.DisplayForEx(x => x.IdState)" type="hidden">
<div class="form-two-column">
	<div class="form-group">
		@Html.LabelFor(m => m.FirstName, new {@class = "control-label"})
		<div class="input-group">
			@Html.TextBoxFor(m => m.FirstName, new {@class = "form-control", autocomplete = "off" })
			@Html.ValidationMessageFor(m => m.FirstName)
		</div>
	</div>
	<div class="form-group">
		@Html.LabelFor(m => m.LastName, new {@class = "control-label"})
		<div class="input-group">
			@Html.TextBoxFor(m => m.LastName, new {@class = "form-control", autocomplete = "off" })
			@Html.ValidationMessageFor(m => m.LastName)
		</div>
	</div>
	<div class="form-group">
		@Html.LabelFor(m => m.Company, new {@class = "control-label"})
		<div class="input-group">
			@Html.TextBoxFor(m => m.Company, new {@class = "form-control", autocomplete = "off" })
			@Html.ValidationMessageFor(m => m.Company)
		</div>
	</div>
	<div class="form-group">
		@Html.LabelFor(m => m.IdCountry, new {@class = "control-label"})
		<div class="input-group">
			@Html.DropDownListFor(m => m.IdCountry, new List<SelectListItem>(), new {@class = "form-control", @id = "ddCountry", autocomplete = "off" })
			@Html.ValidationMessageFor(m => m.IdCountry)
		</div>
	</div>
	<div class="form-group">
		@Html.LabelFor(m => m.Address1, new {@class = "control-label"})
		<div class="input-group">
			@Html.TextBoxFor(m => m.Address1, new {@class = "form-control", autocomplete = "off" })
			@Html.ValidationMessageFor(m => m.Address1)
		</div>
	</div>
	<div class="form-group">
		<label class="control-label"></label>
		<div class="input-group">
			@Html.TextBoxFor(m => m.Address2, new {@class = "form-control", autocomplete = "off" })
			@Html.ValidationMessageFor(m => m.Address2)
		</div>
	</div>
</div>
<div class="form-two-column">
	<div class="form-group">
		@Html.LabelFor(m => m.City, new {@class = "control-label"})
		<div class="input-group">
			@Html.TextBoxFor(m => m.City, new {@class = "form-control", autocomplete = "off" })
			@Html.ValidationMessageFor(m => m.City)
		</div>
	</div>
	<div class="form-group">
		<!--todo-->
		@Html.LabelFor(m => m.IdState, new {@class = "control-label"})
		<div class="input-group">
			@Html.DropDownListFor(m => m.IdState, new List<SelectListItem>(), new {@class = "form-control", @id = "ddState", autocomplete = "off" })
			@Html.ValidationMessageFor(m => m.IdState)
		</div>
	</div>
	<div class="form-group">
		<!--todo-->
		@Html.LabelFor(m => m.County, new {@class = "control-label"})
		<div class="input-group">
			@Html.TextBoxFor(m => m.County, new {@class = "form-control", @id = "txtState", autocomplete = "off" })
			@Html.ValidationMessageFor(m => m.County)
		</div>
	</div>
	<div class="form-group">
		@Html.LabelFor(m => m.PostalCode, new {@class = "control-label"})
		<div class="input-group">
			@Html.TextBoxFor(m => m.PostalCode, new {@class = "form-control", autocomplete = "off" })
			@Html.ValidationMessageFor(m => m.PostalCode)
		</div>
	</div>
	<div class="form-group">
		@Html.LabelFor(m => m.Phone, new {@class = "control-label"})
		<div class="input-group">
			@Html.TextBoxFor(m => m.Phone, new {@class = "form-control phone-mask", autocomplete = "off" })
			@Html.ValidationMessageFor(m => m.Phone)
		</div>
	</div>
	<div class="form-group">
		@Html.LabelFor(m => m.Fax, new {@class = "control-label"})
		<div class="input-group">
			@Html.TextBoxFor(m => m.Fax, new {@class = "form-control phone-mask", autocomplete = "off" })
			@Html.ValidationMessageFor(m => m.Fax)
		</div>
	</div>
</div>
<div class="form-group">
	<div class="checkout-sections-divider"></div>
</div>
<div class="form-group">
	<label class="control-label">Address Type</label>
	<div class="input-group">
		<label>
			@Html.RadioButtonFor(m => m.AddressType, ShippingAddressType.Residential, new { @class = "form-control", autocomplete = "off" })
			Residential
		</label>
		<label class="left-indent-medium">
			@Html.RadioButtonFor(m => m.AddressType, ShippingAddressType.Commercial, new { @class = "form-control", autocomplete = "off" })
			Commercial
		</label>
	</div>
</div>
<div class="form-group">
	@Html.LabelFor(m => m.PreferredShipMethod, new { @class = "control-label" })
	<div class="input-group">
		<label id="PreferredShipMethodLabel" class="form-control-static">@(Model?.PreferredShipMethod != null ? appInfrastructureService.OrderPreferredShipMethod.Single(x => x.Key == (int)Model.PreferredShipMethod.Value).Text : string.Empty)</label>
	</div>
</div>
<div class="form-group">
	@Html.LabelFor(m => m.DeliveryInstructions, new { @class = "control-label" })
	<div class="input-group">
		@Html.TextAreaFor(m => m.DeliveryInstructions, new { @class = "form-control checkout-huge", rows = "5", maxlength = 60, placeholder = "Please enter any special notes for the driver. Example: Please Knock on Door", charcount = "true", autocomplete = "off" })
		<span class="checkout-charcount"><b>60</b> characters remaining</span>
		@Html.ValidationMessageFor(m => m.DeliveryInstructions)
	</div>
</div>

@using System.Threading.Tasks
@using VC.Public.Helpers
@using VitalChoice.Ecommerce.Domain.Entities.Addresses
@model VC.Public.Models.Checkout.AddUpdateShippingMethodModel

@section Meta {
	<title>Wild Seafood & Organics - Vital Choice</title>
}

@{
	Layout = "~/Views/Shared/_ViewCartLayout.cshtml";
}

@section PageScripts {
	<script src="@Url.Content("/app/modules/checkout/checkoutMain.js")"></script>
	<script src="@Url.Content("/app/common/dataAccess.js")"></script>
	<script src="@Url.Content("/app/modules/auth/registration.js")"></script>
	<script src="@Url.Content("/app/modules/checkout/shippingInfo.js")"></script>
}

<div class="checkout-step-container working-area-holder">
	<img class="checkout-step-banner" src="/assets/images/checkout/step3.jpg"/>
	<h4 class="checkout-step-heading">3. Shipping Method</h4>
	<span class="checkout-notification-simple">Enter your Shipping Address information below.</span>
	@using (Html.BeginForm("AddUpdateShippingMethod", "Checkout", null, FormMethod.Post, new {@class = "form-regular medium-small", role = "form"}))
	{
		<input id="hdCountry" value="@Html.DisplayForEx(x => x.IdCountry)" type="hidden">
		<input id="hdState" value="@Html.DisplayForEx(x => x.IdState)" type="hidden">
		@Html.AntiForgeryToken()
		<span class="checkout-notification-important margin-top-small margin-bottom-small">OR</span>
		<div class="form-group">
			<div class="input-group">
				<label class="multiline-checkbox-container">
					@Html.CheckBoxFor(m => m.UseBillingAddress, new {@class = "form-control"})
					Use my Billing address as my Shipping address.<br/>
					<span class="shopping-notice-note">NOTE:</span> Frozen goods cannot be sent to PO boxes.
				</label>
			</div>
		</div>
		if (ViewBag.ShippingAddresses != null && ViewBag.ShippingAddresses.Count > 1)
		{
			<div class="form-group">
				<div class="input-group">
					<label class="multiline-checkbox-container">
						<input id="chkSelectOther" type="checkbox" />
						View and select other Shipping addresses in my account.
					</label>
				</div>
			</div>
			<div class="form-group" style="display: none;">
				@Html.Label("SavedAddresses", "Saved Addresses", new { @class = "control-label" })
				<div class="input-group">
					@Html.DropDownListFor(x => x.Id, new SelectList(ViewBag.ShippingAddresses, "Key", "Value"), new { id = "ddShippingAddressesSelection", @class = "form-control" })
				</div>
			</div>
		}
		<span class="checkout-notification-simple">Then click Continue, below.</span>
		<span class="checkout-notification-important" id="spEnterAddress">Enter your Shipping Address.</span>
		@Html.ValidationSummary(true, "")
		<div class="columns-container checkout-columns-container">

			<div id="dynamicArea">
				@await Html.PartialAsync("_AddUpdateShippingMethod", Model, ViewData)
			</div>

			<div class="form-group">
				<div class="checkout-sections-divider"></div>
			</div>
			<div class="form-group">
				<label class="control-label">Address Type</label>
				<div class="input-group">
					<label>
						@Html.RadioButtonFor(m => m.AddressType, CheckoutAddressType.Residental, new { @class = "form-control" })
						Residential
					</label>
					<label class="left-indent-medium">
						@Html.RadioButtonFor(m => m.AddressType, CheckoutAddressType.Commercial, new { @class = "form-control" })
						Commercial
					</label>
				</div>
			</div>
			<div class="form-group">
				@Html.LabelFor(m => m.DeliveryInstructions, new { @class = "control-label" })
				<div class="input-group">
					@Html.TextAreaFor(m => m.DeliveryInstructions, new { @class = "form-control checkout-huge", rows = "5", maxlength = 60, placeholder = "Please enter any special notes for the driver. Example: Please Knock on Door" })
					<span class="checkout-charcount"><b>60</b> characters remaining</span>
					@Html.ValidationMessageFor(m => m.DeliveryInstructions)
				</div>
			</div>
			<div class="form-group">
				<label class="control-label"></label>
				<div class="input-group">
					<label class="multiline-checkbox-container bold">
						@Html.CheckBoxFor(m => m.IsGiftOrder, new { @class = "form-control" })
						Check here if this order is a gift
					</label>
				</div>
			</div>
			<div class="form-group" id="GiftMessage" style="display: none;">
				@Html.LabelFor(m => m.GiftMessage, new { @class = "control-label" })
				<div class="input-group">
					<div class="form-control-note">
						<span class="shopping-notice-note">NOTE:</span> If this is an e-Gift Certificate, enter the recipient’s email address where indicated AFTER you place your order,<br />
						using the form on the Thank You page. (This is a security requirement.)
					</div>
					@Html.TextAreaFor(m => m.GiftMessage, new { @class = "form-control checkout-huge", rows = "5", maxlength = 255 })
					<span class="checkout-charcount"><b>255</b> characters remaining</span>
					@Html.ValidationMessageFor(m => m.GiftMessage)
				</div>
			</div>
			<div class="form-buttons-group">
				@Html.ActionLink("Back", "AddUpdateBillingAddress", "Checkout", null, new {@class = "button arrow-left-red"})
				<input class="arrow-right-blue" type="submit" value="Continue" />
			</div>
		</div>
	}
</div>
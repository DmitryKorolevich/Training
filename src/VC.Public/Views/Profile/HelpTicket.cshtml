@using VitalChoice.Interfaces.Services
@using VC.Public.Helpers
@using VitalChoice.Infrastructure.Domain.Transfer
@model VC.Public.Models.Profile.HelpTicketManageModel
@inject ReferenceData appInfrastructureService;
@using Microsoft.Extensions.Options
@using VitalChoice.Infrastructure.Domain.Options
@inject IOptions<AppOptions> appOptions

@{
    var infrastructure = appInfrastructureService;
}

@section Meta {
    <title>Vital Choice | Help Ticket</title>
}

@section PageScripts {
    <script src="@Url.Content("/app/modules/profile/helpticket.js")?v=@(appOptions.Value.Versioning.BuildNumber)"></script>
}

<script>
    successMessage = '@ViewBag.SuccessMessage';
</script>

<div class="working-area-holder">
    <div class="left-pane clean-border">
        @await Component.InvokeAsync("ProfileSidebar")
    </div>
    <div class="right-pane clean-indent help-ticket">
        <div class="border-form-left">
            @if (Model != null)
            {
                using (Html.BeginForm("HelpTicket", "Profile", null, FormMethod.Post, null, new { @class = "form-regular main medium-small inner width-100-percent " + (Model.Id == 0 ? "margin-bottom-big" : ""), role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    <h4>Help Desk</h4>
                    @Html.ValidationSummary(true, "")
                    <input name="IdOrder" value="@Html.DisplayForEx(x => x.IdOrder)" type="hidden">
                    <input name="Id" value="@Html.DisplayForEx(x => x.Id)" type="hidden">
                    if (Model.Id != 0)
                    {
                        <div class="form-group">
                            @Html.LabelFor(m => m.Id, new { @class = "control-label" })
                            <div class="input-group">
                                <label class="form-control-static bold">@Html.DisplayForEx(m => m.Id)</label>
                            </div>
                        </div>
                    }
                    <div class="form-group">
                        @Html.LabelFor(m => m.IdOrder, new { @class = "control-label" })
                        <div class="input-group">
                            <label class="form-control-static bold">@Html.DisplayForEx(m => m.IdOrder)</label>
                        </div>
                    </div>
                    if (Model.Id != 0)
                    {
                        <div class="form-group">
                            @Html.LabelFor(m => m.DateCreated, new { @class = "control-label" })
                            <div class="input-group">
                                <label class="form-control-static bold">@Model.DateCreated.ConvertToPst().ToString("MM/dd/yyyy hh:mm tt", System.Globalization.CultureInfo.InvariantCulture)</label>
                            </div>
                        </div>
                    }
                    <div class="form-group">
                        @Html.LabelFor(m => m.Summary, new { @class = "control-label" })
                        <div class="input-group">
                            @if (Model.Id != 0)
                            {
                                @Html.TextBoxFor(m => m.Summary, new { @class = "form-control", @disabled = "disabled" })
                            }
                            else
                            {
                                @Html.TextBoxFor(m => m.Summary, new { @class = "form-control" })
                            }
                            @Html.ValidationMessageFor(m => m.Summary, "")
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Description, new { @class = "control-label" })
                        <div class="input-group">
                            @if (Model.Id != 0)
                            {
                                @Html.TextAreaFor(m => m.Description, new { @class = "form-control big", @rows = 10, @disabled = "disabled" })
                            }
                            else
                            {
                                @Html.TextAreaFor(m => m.Description, new { @class = "form-control big", @rows = 10 })
                            }
                            @Html.ValidationMessageFor(m => m.Description, "")
                        </div>
                    </div>
                    if (Model.Id == 0)
                    {
                        <div class="form-buttons-group">
                            <input class="yellow add-ticket-button" type="submit" value="Add New Help Ticket" />
                            @Html.ActionLink("Back", "HelpTickets", new { idorder = Model.IdOrder, ignore = true }, new { @class = "button" })
                        </div>
                    }
                }
                if (Model.Id != 0)
                {
                    <div class="form-buttons-group">
                        @Html.ActionLink("Back", "HelpTickets", new { idorder = Model.IdOrder }, new { @class = "button" })
                    </div>
                }
            }
        </div>
    </div>
</div>
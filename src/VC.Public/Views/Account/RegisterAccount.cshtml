@using System.Threading.Tasks
@using VC.Public.Models.Auth
@using VitalChoice.Interfaces.Services.Settings
@model RegisterAccountModel
@inject ICountryService _countryService

@section Meta {
	<title>Vital Choice | Registration</title>
}

@section PageScripts {
	<script src="@Url.Content("/app/common/dataAccess.js")"></script>
	<script src="@Url.Content("/app/modules/auth/registration.js")"></script>
}

<div class="working-area-holder">
	@using (Html.BeginForm("RegisterAccount", "Account", null, FormMethod.Post, new { @class = "form-regular medium-small", role = "form" }))
	{
		@Html.HiddenFor(m => m.Email)
		@Html.AntiForgeryToken()
		<h4>Register a New Account</h4>
		<div class="sub-title"><span>Create a Password</span></div>
		<span class="form-control-hint">Must be at least 8 characters long, contain at least 1 numerical digit, 1 capital character and 1 special character.<br />Example: Dontuse!#1</span>
		@Html.ValidationSummary(true, "")
		<div class="form-group">
			@Html.LabelFor(m => m.Password, new {@class = "control-label"})
			<div class="input-group">
				@Html.PasswordFor(m => m.Password, new {@class = "form-control"})
				@Html.ValidationMessageFor(m => m.Password)
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.ConfirmPassword, new {@class = "control-label"})
			<div class="input-group">
				@Html.PasswordFor(m => m.ConfirmPassword, new {@class = "form-control"})
				@Html.ValidationMessageFor(m => m.ConfirmPassword)
			</div>
		</div>

		<div class="sub-title"><span>Profile Address</span></div>
		<div class="form-two-column">
			<div class="form-group">
				@Html.LabelFor(m => m.FirstName, new {@class = "control-label"})
				<div class="input-group">
					@Html.TextBoxFor(m => m.FirstName, new {@class = "form-control"})
					@Html.ValidationMessageFor(m => m.FirstName)
				</div>
			</div>
			<div class="form-group">
				@Html.LabelFor(m => m.LastName, new {@class = "control-label"})
				<div class="input-group">
					@Html.TextBoxFor(m => m.LastName, new {@class = "form-control"})
					@Html.ValidationMessageFor(m => m.LastName)
				</div>
			</div>
			<div class="form-group">
				@Html.LabelFor(m => m.Company, new {@class = "control-label"})
				<div class="input-group">
					@Html.TextBoxFor(m => m.Company, new {@class = "form-control"})
					@Html.ValidationMessageFor(m => m.Company)
				</div>
			</div>
			<div class="form-group">
				@Html.LabelFor(m => m.IdCountry, new {@class = "control-label"})
				<div class="input-group">
					@Html.DropDownListFor(m => m.IdCountry, new List<SelectListItem>(), new {@class = "form-control", @id = "ddCountry"})
					@Html.ValidationMessageFor(m => m.IdCountry)
				</div>
			</div>
			<div class="form-group">
				@Html.LabelFor(m => m.Address1, new {@class = "control-label"})
				<div class="input-group">
					@Html.TextBoxFor(m => m.Address1, new {@class = "form-control"})
					@Html.ValidationMessageFor(m => m.Address1)
				</div>
			</div>
			<div class="form-group">
				<label class="control-label"></label>
				<div class="input-group">
					@Html.TextBoxFor(m => m.Address2, new {@class = "form-control"})
					@Html.ValidationMessageFor(m => m.Address2)
				</div>
			</div>
		</div>
		<div class="form-two-column">
			<div class="form-group">
				@Html.LabelFor(m => m.City, new {@class = "control-label"})
				<div class="input-group">
					@Html.TextBoxFor(m => m.City, new {@class = "form-control"})
					@Html.ValidationMessageFor(m => m.City)
				</div>
			</div>
			<div class="form-group">
				<!--todo-->
				@Html.LabelFor(m => m.IdState, new {@class = "control-label"})
				<div class="input-group">
					@Html.DropDownListFor(m => m.IdState, new List<SelectListItem>(), new {@class = "form-control", @id = "ddState"})
					@Html.ValidationMessageFor(m => m.IdState)
				</div>
			</div>
			<div class="form-group">
				<!--todo-->
				@Html.LabelFor(m => m.County, new {@class = "control-label"})
				<div class="input-group">
					@Html.TextBoxFor(m => m.County, new {@class = "form-control", @id = "txtState"})
					@Html.ValidationMessageFor(m => m.County)
				</div>
			</div>
			<div class="form-group">
				@Html.LabelFor(m => m.PostalCode, new {@class = "control-label"})
				<div class="input-group">
					@Html.TextBoxFor(m => m.PostalCode, new {@class = "form-control"})
					@Html.ValidationMessageFor(m => m.PostalCode)
				</div>
			</div>
			<div class="form-group">
				@Html.LabelFor(m => m.Phone, new {@class = "control-label" })
				<div class="input-group">
					@Html.TextBoxFor(m => m.Phone, new {@class = "form-control phone-mask" })
					@Html.ValidationMessageFor(m => m.Phone)
				</div>
			</div>
			<div class="form-group">
				@Html.LabelFor(m => m.Fax, new {@class = "control-label" })
				<div class="input-group">
					@Html.TextBoxFor(m => m.Fax, new {@class = "form-control phone-mask" })
					@Html.ValidationMessageFor(m => m.Fax)
				</div>
			</div>
		</div>
		<div class="form-buttons-group">
			<input type="submit" value="Continue" class="btn btn-default" />
		</div>
	}
		<div class="form-group">
			<hr />
		</div>
	</div>